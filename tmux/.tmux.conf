
# Index starts from 1
set-option -g base-index 1
set-option -g pane-base-index 1

# Renumber windows when a window is closed
set-option -g renumber-windows on

set-option -g history-limit 10000

# command line
set -g message-style 'bold bg=colour37 fg=colour232'

# Border
set -g pane-border-style 'bg=default fg=colour238'
set -g pane-active-border-style 'bg=default fg=colour105'

# Statusbar
set -g status-style 'bg=black'
set -g status-justify left 
# set -g status-left ''
set -g status-left '[#S]' 
set -g window-status-format " #[fg=white] #I #W#F "
set -g window-status-current-format " #[fg=colour234,bg=#88c0d0,bold] #I #W#F "
# set -g window-status-format "#[fg=white]  [#I] #(basename #{pane_current_path}):#{pane_current_command}#F  "
# set -g window-status-current-format "#[fg=colour234,bg=#88c0d0,bold]  [#I] #(basename #{pane_current_path}):#{pane_current_command}#F  "
# set -g window-status-format         '#[fg=white]  #I:#{?#{m:#W,zsh},#(basename #{pane_current_path}),#W}#F '
# set -g window-status-current-format '#[fg=colour234,bg=#88c0d0]  #I:#{?#{m:#W,zsh},#(basename #{pane_current_path}),#W}#F  '
set -g status-right '#[bold,bg=default,fg=colour37][#(qdbus "org.fcitx.Fcitx" "/inputmethod" "GetCurrentIM")] %H:%M %Y-%m-%d'

# Mouse
set-option -g mouse on

# -------------------------------------------------------------------
# Window options
# -------------------------------------------------------------------
# Copy-mode
set-window-option -g mode-keys vi

set -g pane-border-format "#{pane_index} #{pane_title}"
set -g pane-border-status bottom

# -------------------------------------------------------------------
# Key bindings
# -------------------------------------------------------------------
# set prefix to ` (backtick)
unbind C-b
set-option -g prefix `
bind ` send-prefix

# Use vi keys
set -gw mode-keys vi

# prefix c
bind-key c new-window -c "#{pane_current_path}"

# prefix |
bind-key '\' split-window -h -c "#{pane_current_path}"

# prefix -
bind-key - split-window -c "#{pane_current_path}"

# swap
bind-key -r "<" swap-window -t -1
bind-key -r ">" swap-window -t +1

# Back and forth
# bind-key bspace previous-window
# bind-key space next-window
# bind-key / next-layout # Overridden

# Pane-movement
# bind-key h select-pane -L
# bind-key l select-pane -R
# bind-key j select-pane -D
# bind-key k select-pane -U
bind-key -r J resize-pane -D 5
bind-key -r K resize-pane -U 5
bind-key -r H resize-pane -L 5
bind-key -r L resize-pane -R 5
bind-key tab select-pane -t :.+
bind-key btab select-pane -t :.-

# smart pane switching with awareness of vim splits
# makes ctrl-j and ctrl-k navigate fzf search results when fzf active in pane
# providing the same behavior as ctrl-j and ctrl-k when navigating ctrl-p results
# inside vim.

is_vim="tmux display-message -p '#{pane_current_command}' | grep -iq vim"
is_fzf="tmux display-message -p '#{pane_current_command}' | grep -iq fzf"

bind -n C-h run "($is_vim && tmux send-keys C-h) || \
                 tmux select-pane -L"

bind -n C-j run "($is_vim && tmux send-keys C-j)  || \
                 ($is_fzf && tmux send-keys C-j) || \
                 tmux select-pane -D"

bind -n C-k run "($is_vim && tmux send-keys C-k) || \
                 ($is_fzf && tmux send-keys C-k)  || \
                 tmux select-pane -U"

bind -n C-l run "($is_vim && tmux send-keys C-l) || \
                 tmux select-pane -R"

bind-key -n 'C-\' if-shell "$is_vim" "send-keys C-\\" "select-pane -l"

# Shift arrow to switch windows
bind -n S-Left  previous-window
bind -n S-Right next-window

# Capture pane and open in Vim
bind-key C-c capture-pane -S -102400\;\
             save-buffer /tmp/tmux-capture.txt\;\
             new-window "view /tmp/tmux-capture.txt"\;\
             delete-buffer

# use `<prefix> [` to enter copy-mode
bind-key [ copy-mode
unbind-key C-[
bind-key ] paste-buffer
set -sg escape-time 0

# Synchronize panes
bind-key * set-window-option synchronize-pane

set -g @override_copy_command 'xclip'

# Reload ~/.tmux.conf
bind-key r source-file ~/.tmux.conf \; display-message "Reloaded!"

set -g @plugin 'tmux-plugins/tmux-sensible'
set -g @plugin 'tmux-plugins/tpm'
# set -g @plugin "arcticicestudio/nord-tmux"
# set -g @plugin 'tmux-plugins/tmux-copycat'
set -g @plugin 'tmux-plugins/tmux-yank'
# set -g @themepack 'double/cyan'
# set -g @plugin 'jimeh/tmux-themepack'


if-shell "[ -f ~/.tmux.conf.local ]" 'source ~/.tmux.conf.local'

run -b '~/.tmux/plugins/tpm/tpm'

