" windows location $HOME/vimfiles/vimrc

" Constants
let s:is_windows = has('win32') || has('win64')
let s:is_gui = has("gui_running")
let s:is_fast = !s:is_windows || (s:is_windows && s:is_gui)
let s:has_node = executable('node')
let s:has_go = executable('go')

" Settings
filetype plugin indent on
syntax enable
runtime macros/matchit.vim
set backspace=indent,eol,start
set complete-=i
set smarttab
set nowrap
set number relativenumber
set title
set wildchar=<TAB>
set wildmenu
set wildmode=longest:list,full
set wildignore=*.o,*.class,*.pyc,*.swp,*.bak,**/node_modules/**,elm_stuff
set nobackup noswapfile
set autoread
set copyindent
set autoindent
set ignorecase
set smartcase
set clipboard=unnamed
set splitbelow splitright
set hidden
set mouse=a
set scrolloff=1
set sidescrolloff=5
set display+=lastline

set ttyfast
set ttimeout
set ttimeoutlen=50
set lazyredraw

set incsearch
set hlsearch
" Use <C-L> to clear the highlighting of :set hlsearch.
nnoremap <silent> <C-L> :nohlsearch<C-R>=has('diff')?'<Bar>diffupdate':''<CR><CR><C-L>

set list listchars=tab:»-,trail:·,extends:>,precedes:<,nbsp:+
set formatoptions+=j " Delete comment character when joining commented lines

set history=1000
set tabpagemax=50

" set block cursor
if $TERM == "xterm" || $TERM == "xterm-256color"
    let &t_SI = "\<Esc>[6 q"
    let &t_SR = "\<Esc>[4 q"
    let &t_EI = "\<Esc>[2 q"
endif

" shell
if s:is_windows
    set shellcmdflag=/D/C
endif

" Plugins
let s:path = expand('<sfile>:p:h')
call plug#begin(s:path . '/plugged')

"theme
Plug 'ajh17/spacegray.vim'
Plug 'whatyouhide/vim-gotham'
Plug 'morhetz/gruvbox'
Plug 'liuchengxu/space-vim-dark'
Plug 'kaicataldo/material.vim'
Plug 'dracula/vim', { 'as': 'dracula' }
Plug 'sonph/onehalf', { 'rtp': 'vim' }
Plug 'Rigellute/rigel'
Plug 'joshdick/onedark.vim'
Plug 'tyrannicaltoucan/vim-deep-space'
Plug 'nightsense/stellarized'
Plug 'nightsense/cosmic_latte'
Plug 'nanotech/jellybeans.vim'
Plug 'treycucco/vim-monotonic'
Plug 'romainl/Apprentice'
Plug 'kristijanhusak/vim-hybrid-material'

"start page
if s:is_fast
    Plug 'mhinz/vim-startify'
endif

" snippet
if s:is_fast
    Plug 'SirVer/ultisnips'
    Plug 'honza/vim-snippets'
endif

" git
Plug 'tpope/vim-fugitive'
Plug 'mhinz/vim-signify'

" hg
Plug 'ludovicchabant/vim-lawrencium'

"diff tools
Plug 'whiteinge/diffconflicts'

" coc
Plug 'neoclide/coc.nvim', {'tag': '*', 'do': { -> coc#util#install()}}

" editing
" Plug 'tomtom/tcomment_vim'
Plug 'Shougo/context_filetype.vim'
Plug 'tyru/caw.vim'
Plug 'terryma/vim-expand-region'
Plug 'justinmk/vim-sneak'
Plug 'tpope/vim-repeat'
Plug 'tpope/vim-surround'
Plug 'tpope/vim-eunuch'
Plug 'haya14busa/is.vim'
Plug 'osyo-manga/vim-anzu'
Plug 'haya14busa/vim-asterisk'
Plug 'wellle/targets.vim'
Plug 'kana/vim-textobj-user'
Plug 'kana/vim-textobj-function'
Plug 'kana/vim-textobj-line'
Plug 'michaeljsmith/vim-indent-object'
Plug 'justinmk/vim-ipmotion'
Plug 'mileszs/ack.vim'
" Plug 'cohama/lexima.vim'
Plug 'Raimondi/delimitMate'
Plug 'chiedojohn/vim-case-convert'
Plug 'christoomey/vim-tmux-navigator'
Plug 'tmux-plugins/vim-tmux-focus-events'
Plug 'Yggdroot/indentLine', { 'on': 'IndentLinesEnable' }
Plug 'dhruvasagar/vim-zoom'
Plug 'AndrewRadev/splitjoin.vim'
Plug 'pbrisbin/vim-mkdir'

" file finder
if s:is_windows
    Plug 'Yggdroot/LeaderF', { 'do': './install.bat' }
else
    Plug 'junegunn/fzf.vim'
endif

if !s:is_windows && s:has_go
    Plug 'RRethy/vim-hexokinase', { 'do': 'make hexokinase' }
endif

" js / vue
if s:is_fast
    Plug 'w0rp/ale', { 'for': ['javascript', 'vue', 'javascript.jsx', 'css', 'scss', 'html', 'json' ]}
    Plug 'mattn/emmet-vim',  { 'for':['javascript', 'javascript.jsx', 'vue', 'html', 'css', 'scss', 'sass' ]}
    Plug 'pangloss/vim-javascript', { 'for': ['javascript', 'javascript.jsx', 'html', 'vue'] }
    Plug 'elzr/vim-json', { 'for': ['json']}
    Plug 'posva/vim-vue', { 'for': ['vue']}
    Plug 'sgur/vim-editorconfig'
    Plug '1995eaton/vim-better-javascript-completion',  { 'for': [ 'javascript', 'vue' ]}
endif

" elm
Plug 'elmcast/elm-vim', { 'for': ['elm']}

call plug#end()

" auto reload vimrc when editing it
if s:is_windows
    autocmd! bufwritepost vimrc source ~/vimfiles/vimrc
else
    " autocmd! bufwritepost vimrc source ~/.vimrc | call LightlineReload()
    autocmd! bufwritepost vimrc source ~/.vim/vimrc
endif

set termguicolors

" let g:material_theme_style = 'dark'
" colorscheme material

" let g:gruvbox_contrast_dark='hard'
" colorscheme gruvbox
"
" colorscheme rigel
" highlight StatusLineNC guifg=#555555 guibg=#333333 cterm=NONE ctermfg=2 ctermbg=NONE

" set notermguicolors
" colorscheme monotonic

" colorscheme molokai
" colorscheme gotham
" colorscheme gotham256
" colorscheme spacegray
" colorscheme space-vim-dark
" colorscheme cosmic_latte
" colorscheme deep-space
" colorscheme stellarized
" colorscheme jellybeans
colorscheme apprentice
" colorscheme hybrid_reverse


if s:is_fast
    set cursorline
    autocmd WinEnter * setlocal cursorline
    autocmd WinLeave * setlocal nocursorline
endif

if has('unix')
    set guifont=Source_Code_Pro:h10,DejaVu_Sans_Mono:h10,Menlo:h10
    " set guifont=Fira_Code:h10,Source_Code_Pro:h10,DejaVu_Sans_Mono:h10,Menlo:h10
endif

" GUI
if s:is_gui
    au GUIEnter * simalt ~x
    set relativenumber
    " set guifont=Anonymous_Pro:h11
    " set guifont=Fira_Code_Medium:h10
    set guifont=Source_Code_Pro:h10
    set linespace=1
endif

"gui options
set guioptions-=T
set guioptions-=m
set guioptions-=r
set guioptions-=L

" disable sound on errors
set noerrorbells
set novisualbell
set t_vb=
set tm=500

" TAB setting{
    set expandtab        "replace <TAB> with spaces
    set tabstop=4
    set softtabstop=4
    set shiftwidth=4
"}


set path=.,src/main/java,src/main/test,src/frontend/src,frontend/src
set includeexpr=substitute(v:fname,'/','src/frontend/src/','')
set suffixesadd=.js,.vue,.scss

"startify
" let g:startify_custom_header = ['']
let g:startify_change_to_vcs_root = 1
let g:startify_lists = [
            \ { 'header': ['   MRU '. getcwd()], 'type': 'dir' },
            \ { 'header': ['   MRU'],            'type': 'files' },
            \ { 'header': ['   Sessions'],       'type': 'sessions' }
            \ ]

" hg/git gutter
let g:signify_realtime = 0
let g:signify_sign_change = '~'
let g:signify_update_on_focusgained = 1

" hexokinase
let g:Hexokinase_highlighters = ['backgroundfull']

" Shortcuts

" paste on visual mode without chaning original register
vnoremap p "_dP

"; :
nnoremap ; :
nnoremap > ;
nnoremap < ,

" beginning / end of line
nnoremap ,h ^
nnoremap ,l $

" center search
nnoremap n nzz
nnoremap N Nzz

inoremap jk <ESC>

" indent in visual model
vnoremap < <gv
vnoremap > >gv

" list buffer
noremap <left> :bp<CR>
noremap <right> :bn<CR>

" Encoding
set encoding=utf-8
set termencoding=utf-8
set fileencoding=utf-8
set fileencodings=ucs-bom,utf-8,big5,gb2312,latin1

" open file
cnoremap %% <C-R>=fnameescape(expand('%:h')).'/'<cr>
map ,ew :e %%
map ,es :sp %%
map ,ev :vsp %%
map ,et :tabe %%

" edit vimrc
nnoremap <silent> ,vv :vsp ~/.vim/vimrc<CR>

"jump between split
nnoremap <C-J> <C-W><C-J>
nnoremap <C-K> <C-W><C-K>
nnoremap <C-L> <C-W><C-L>
nnoremap <C-H> <C-W><C-H>

" vimdiff
if &diff
    nnoremap ,g :diffget<CR>
    nnoremap ,p :diffput<CR>
endif

" Auto-resize splits when Vim gets resized.
autocmd VimResized * wincmd =

" Update a buffer's contents on focus if it changed outside of Vim.
au FocusGained,BufEnter * :checktime

" Profile Vim by running this command once to start it and again to stop it.
function! s:profile(bang)
  if a:bang
    profile pause
    noautocmd qall
  else
    profile start /tmp/profile.log
    profile func *
    profile file *
  endif
endfunction

command! -bang Profile call s:profile(<bang>0)

" Zoom / Restore window.
nnoremap ,z :call zoom#toggle()<cr>

" emmet
imap <C-E> <C-y>,

" vim-expand-region
" map K <Plug>(expand_region_expand)
" map J <Plug>(expand_region_shrink)
let g:expand_region_text_objects = {
      \ 'iw'  :0,
      \ 'iW'  :0,
      \ 'iq'  :0,
      \ 'i<'  :0,
      \ 'ib'  :1,
      \ 'it'  :1,
      \ 'ii'  :1,
      \ 'at'  :1
      \ }


" is.vim/anzu/vim-asterisk
map n <Plug>(is-nohl)<Plug>(anzu-n-with-echo)
map N <Plug>(is-nohl)<Plug>(anzu-N-with-echo)
" map *  <Plug>(asterisk-z*)<Plug>(anzu-star-with-echo)<Plug>(is-nohl-1)
map *  <Plug>(asterisk-z*)<Plug>(is-nohl-1)
map g* <Plug>(asterisk-gz*)<Plug>(is-nohl-1)
map #  <Plug>(asterisk-z#)<Plug>(is-nohl-1)
map g# <Plug>(asterisk-gz#)<Plug>(is-nohl-1)
nmap <Esc><Esc> <Plug>(anzu-clear-search-status)

" coc
let g:coc_global_extensions = [
            \   'coc-css',
            \   'coc-html',
            \   'coc-json',
            \   'coc-emmet',
            \   'coc-ultisnips'
            \ ]
            "\   'coc-pairs',
set updatetime=300
set shortmess+=c
set signcolumn=yes
" remap goto
" nmap <silent> gd <Plug>(coc-definition)
" nmap <silent> gy <Plug>(coc-type-definition)
" nmap <silent> gi <Plug>(coc-implementation)
" nmap <silent> gr <Plug>(coc-references)
" Remap for do codeAction of current line
nmap ,ca  <Plug>(coc-codeaction)
" Fix autofix problem of current line
nmap ,qf  <Plug>(coc-fix-current)
nmap ,ne  <Plug>(coc-diagnostic-next-error)
nmap ,pe  <Plug>(coc-diagnostic-prev-error)

inoremap <expr> <cr> pumvisible() ? "\<C-y>" : "\<CR>"


" leaderF
if s:is_windows
    nnoremap ,r :LeaderfMru<CR>
    nnoremap ,g :Leaderf rg -e<Space>
    let g:Lf_WindowHeight = 0.30
    let g:Lf_MruFileExclude = ['*.so', '*.tmp', '*.bak', '*.exe', '*.dll']
    let g:Lf_StlSeparator = { 'left': '', 'right': '', 'font': '' }
    let g:Lf_CommandMap = { 'C-]': ['C-V'], 'C-J':['C-N'], 'C-K':['C-P'] }
else
    " fzf
    function! s:build_quickfix_list(lines)
      call setqflist(map(copy(a:lines), '{ "filename": v:val }'))
      copen
      cc
    endfunction
    let $FZF_DEFAULT_OPTS = ' --reverse'
    let g:fzf_layout = { 'down': '~30%' }
    let g:fzf_colors =
                \ { 'fg': ['fg', 'Normal'],
                \ 'bg': ['bg', 'Normal']}
    let g:fzf_action = {
        \ 'ctrl-q': function('s:build_quickfix_list'),
        \ 'ctrl-t': 'tab split',
        \ 'ctrl-x': 'split',
        \ 'ctrl-v': 'vsplit'
        \ }
    nnoremap ,f :Files<cr>
    nnoremap ,r :History<cr>
    nnoremap ,b :Buffers<cr>
    let g:fzf_files_options =
        \ '--preview "(bat {}) 2> /dev/null | head -'.&lines.'"'
endif


"ack.vim
if executable('ag')
    let g:ackprg = 'ag --vimgrep'
endif

" vim-sneak
let g:sneak#s_next=1
let g:sneak#streak=1
nmap f <Plug>Sneak_f
nmap F <Plug>Sneak_F
nmap t <Plug>Sneak_t
nmap T <Plug>Sneak_T

" targerts
" Prefer multiline targets around cursor over distant targets within cursor line:
let g:targets_seekRanges = 'cc cr cb cB lc ac Ac lr lb ar ab lB Ar aB Ab AB rr ll rb al rB Al bb aa bB Aa BB AA'

" ale
nmap <silent> ,af <Plug>(ale_fix)
nmap <silent> ,aj :ALENext<cr>
nmap <silent> ,ak :ALEPrevious<cr>
let g:ale_sign_column_always = 1
let g:ale_sign_error = "\uf00d"
let g:ale_sign_warning = "\uf529"
highlight ALEErrorSign guifg=#C30500
highlight ALEWarningSign guifg=#ED6237
highlight clear ALEWarningLine

let s:prettierlocations = ['/src/frontend', '/web', '/frontend']
for l in s:prettierlocations
    let p = getcwd().l.'/node_modules/.bin/prettier'
    if filereadable(p)
        let s:prettierexec = p
        break
    endif
endfor

if exists('s:prettierexec')
    let g:ale_javascript_prettier_executable = s:prettierexec
    let g:ale_css_prettier_executable = s:prettierexec
    let g:ale_html_prettier_executable = s:prettierexec
    let g:ale_json_prettier_executable = s:prettierexec
    let g:ale_scss_prettier_executable = s:prettierexec
    let g:ale_vue_prettier_executable = s:prettierexec
endif


let s:eslintdirs = ['/src/frontend', '/web', '/frontend']
for l in s:eslintdirs
    let p = getcwd().l.'/.eslintrc.js'
    if filereadable(p)
        let s:eslintdir = getcwd().l
        break
    endif
endfor
if !exists('s:eslintdir')
    let s:eslintdir = getcwd()
endif

if executable('eslint_d')
    let g:ale_javascript_eslint_executable = 'eslint_d'
endif
let g:ale_javascript_eslint_options = '--resolve-plugins-relative-to ' . s:eslintdir
let g:ale_javascript_jshint_executable = getcwd() . '/node_modules/jshint/bin/jshint'
let g:ale_fixers = {
            \ 'javascript': ['prettier', 'eslint'],
            \ 'vue': ['prettier', 'eslint'],
            \ 'css': ['prettier'],
            \ 'scss': ['prettier'],
            \ 'html': ['prettier', 'eslint'],
            \ 'json': ['prettier'],
            \}
let g:ale_lint_on_text_changed = 'normal'
let g:ale_lint_on_save = 1
let g:ale_fix_on_save = 1


" vim-vue
au BufNewFile,BufRead *.vue setlocal filetype=vue
autocmd FileType vue syntax sync fromstart
let g:vue_disable_pre_processors=1

" vim-json
let g:vim_json_syntax_conceal = 0


" ultisnips
let g:UltiSnipsEditSplit="vertical"
let g:UltiSnipsExpandTrigger="<tab>"

" IndentLines
let g:indentLine_char_list = ['|', '¦', '┆', '┊']
autocmd! User indentLine doautocmd indentLine Syntax

" statusline {

function! CurDir()
    let curdir = substitute(getcwd(), $HOME, "~", "")
    return curdir
endfunction

function! HasPaste()
    return &paste ? '[P]':''
endfunction

function! FugitiveStatus() abort
    if !exists('g:loaded_fugitive')
        return ''
    endif
    let l:status = fugitive#head()
    return l:status
    " return l:status == '' ? '': "\ue725".l:status
endfunction

function! LawrenciumStatus() abort
    if !exists('g:loaded_lawrencium')
        return ''
    endif
    let l:status = lawrencium#statusline()
    return l:status
    " return l:status == '' ? '': "\ue725".l:status
endfunction

function! ChangedStatus() abort
    let l:summary = [0, 0, 0]
    if exists('b:sy')
        let l:summary = b:sy.stats
    elseif exists('b:gitgutter.summary')
        let l:summary = b:gitgutter.summary
    endif
    if max(l:summary) > 0
	return (summary[0] > 0 ? printf('+%d', summary[0]) : '') .
	    \ (summary[1] > 0 ? printf('~%d', summary[1]) : '') .
	    \ (summary[2] > 0 ? printf('-%d', summary[2]) : '')
    endif
    return ''
endfunction

function! VcsInfoStatus()
    return FugitiveStatus() . LawrenciumStatus() . ChangedStatus()
endfunction

function! ALELinterStatus() abort
    if !exists('g:loaded_ale')
        return ''
    endif
    if ale#engine#IsCheckingBuffer(bufnr(''))
        return 'linting...'
    endif
    let linted = get(g:, 'ale_enabled', 0) == 1
        \ && getbufvar(bufnr(''), 'ale_linted', 0) > 0
        \ && ale#engine#IsCheckingBuffer(bufnr('')) == 0
    if !linted
       return ''
    endif
    let l:counts = ale#statusline#Count(bufnr(''))
    if l:counts.total == 0
        return 'OK'
    endif
    let l:all_errors = l:counts.error + l:counts.style_error
    let l:all_non_errors = l:counts.total - l:all_errors
    return (all_non_errors > 0 ? printf('%dW', all_non_errors) : '') .
        \ (all_errors > 0? printf('%dE', all_errors) : '')
endfunction

function! s:is_tmp_file() abort
  if !empty(&buftype)
        \ || index(['startify', 'gitcommit'], &filetype) > -1
        \ || expand('%:p') =~# '^/tmp'
    return 1
  else
    return 0
  endif
endfunction

function! CocCurrentFunction() abort
    return get(b:, 'coc_current_function', '')
endfunction

function! CocLineStatus() abort
  if s:is_tmp_file()
      return ''
  endif
  if exists('g:coc_status') && get(g:, 'coc_enabled', 0)
      return g:coc_status
  endif
  return ''
endfunction

function! CocStatus() abort
    let s1 = CocCurrentFunction()
    let s2 = CocLineStatus()
    return s1 . (!empty(s1) && !empty(s2) ? ' ':'') . s2
endfunction

function! ModifiedStatus()
    return &ft =~ 'help' ? '' : &modified ? '+' : &modifiable ? '' : '-'
endfunction
function! ReadonlyStatus()
    return &ft !~? 'help' && &readonly ? '!' : ''
endfunction

function! FilenameStatus()
    return ReadonlyStatus() .
            \ ('' != expand('%:t') ? expand('%:p:.') : '[No Name]') .
            \ ('' != ModifiedStatus() ? ModifiedStatus() : '')
endfunction

function! LineInfoStatus()
    return '%-10(%3l:%c%)%P'
    " return '%-4(%P%)'
endfunction

function! ZoomStatus()
    if exists('g:loaded_zoom') && zoom#statusline() != ''
        return '[Z]'
    endif
    return ''
endfunction

function! AddBracket(s)
    if exists('a:s')
        return (a:s == '')? '': ' ['.a:s.'] '
    endif
    return ''
endfunction

function! AddSpace(s)
    if exists('a:s')
        return (a:s == '')? '': ' '.a:s.' '
    endif
    return ''
endfunction

let g:currentmode={
    \ 'n'  : 'N',
    \ 'no' : 'NO',
    \ 'v'  : 'V',
    \ 'V'  : 'V·Line',
    \ "\<C-v>" : 'V·Block',
    \ 's'  : 'S',
    \ 'S'  : 'S·Line',
    \ "\<C-s>" : 'S·Block',
    \ 'i'  : 'I',
    \ 'R'  : 'R',
    \ 'Rv' : 'V·Replace',
    \ 'c'  : 'C',
    \ 'cv' : 'Vim Ex',
    \ 'ce' : 'Ex',
    \ 'r'  : 'Prompt',
    \ 'rm' : 'More',
    \ 'r?' : 'Confirm',
    \ '!'  : 'Shell',
    \ 't'  : 'Terminal'
    \}

function! Statusline()
  let paste = "%{HasPaste()}"
  let file = '%{FilenameStatus()}'
  " let mode = '%{toupper(g:currentmode[mode()])} '
  " let mod = "%{&modified ? '[+] ' : !&modifiable ? '[x] ' : ''}"
  " let ro  = "%{&readonly ? '[!] ' : ''}"
  " let enc = "%{&fileencoding?&fileencoding:&encoding}"
  " let ft  = "%{len(&filetype) ? &filetype : ''}"
  " let ff  = "%{&fileformat}"
  let vcs = "%{AddBracket(VcsInfoStatus())}"
  let sep = ' %= '
  let coc = '%{AddSpace(CocStatus())}'
  let ale = '%{AddSpace(ALELinterStatus())}'
  let pos = LineInfoStatus()
  " let dir = '%20.30{CurDir()} '
  let zoom = '%{ZoomStatus()}'
  return paste.file.zoom.vcs.sep.coc.ale.pos
endfunction

function! RefreshStatusline()
    call setwinvar(winnr(), '&statusline', Statusline())
endfunction

" vanilla statusline
" set noshowmode
set laststatus=2
let &statusline = Statusline()

augroup ALEStatus
  autocmd!
  autocmd User ALEJobStarted call RefreshStatusline()
  autocmd User ALELintPost call RefreshStatusline()
  autocmd User ALEFixPost call RefreshStatusline()
augroup END


"}

" tmux
let g:tmux_navigator_disable_when_zoomed = 1
